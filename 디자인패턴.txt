디자인 패턴

싱글톤패턴,커맨더패턴,프록시패턴,팩토리패턴..등등


싱글톤 패턴:
한 클래스에 접근할 수 있는 객체 인스턴스는 하나이며, 이를 계속 재사용 하는것

커맨더 패턴:
명령을 객체로 인식하여, 해당 명령을 호출하는 클래스와, 해당 명령을 수행하는 클래스를 분리하여
SRP와 OCP를 극대화 함

프록시 패턴: 말그대로 전달자 패턴, A클래스가 C클래스에 요청을할때, 임시로 어떤 기능을 추가하거나
숨기기위해 B클래스를 거쳐갈수 있는데, 이러한 패턴을 프록시 패턴이라고 함
-> 실제 객체에 접근하기 전에 그 접근을 제어하거나 부가적인 작업을 수행하기 위해 중간에 대리 객체(프록시)를 두는 디자인 패턴입니다.

팩토리 패턴:
객체의 생성과 사용은 다른 공간에서 이루어져야 한다는 패턴,
공장처럼 객체의 생성만 따로 담당하는 책임과, 사용하는 곳은 별도로 존재함 