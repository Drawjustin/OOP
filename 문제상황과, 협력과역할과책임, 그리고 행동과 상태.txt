객체지향의 사실과 오해

협력과 역할과 책임 그리고 행동과 속성

정말 정말 잘쓴책이다. 한줄한줄 어렵게 곱씹어 읽다보면 작가의 의도를 파악하고 해석하게된다.


책 요약

문제상황을 여러 객체들의 협력으로 바라봐야한다.
큰 문제상황을 작은 여러 문제상황으로 쪼개고, 작은 문제상황을 여러 역할의 협력으로 해결하는 것이다.



예를들어 재판이라는 문제상황이 주어졌다. 즉 우리는 재판을 해야한다.

이때 우리는 자연스럽게 재판하는사람, 재판당하는사람 이렇게 두명의 역할과 여러 행동이 필요한것을 알 수 있다.
과정을 그려보면 다음과같다

(문제상황)재판요청 -> 증인호출 -> 증인나오기 -> 증인하기 ->재판하기

위의 행동을 응집도있게 묶어보자.
(증인호출,재판하기),(증인나오기,증인하기)

이때 우리는 이러한 행동들을 메소드로 비유할 수 있으며, 이 모든 행동(메소드)는 공통적인 하나의 역할을 수행할 책임이 존재한다.(SRP)

참고로 책임은 작은책임, 큰책임 기준에따라 나뉠수있는데,
예를들어 강아지 집사 역할의 책임은 "강아지 관리"이며 행동은 강아지 산책하기, 강아지 밥주기, 강아지 목욕시키기가 있다고하자

"강아지 관리" 의 책임은 여러 행동들로 구성될수있고, 밥주기, 목욕시키기 또한 마찬가지이다 , 이때 행동 = 메소드이다
SRP에서 단일책임은 바로 이 "강아지 관리"를 의미하며 역할에 적합한 책임을 가져야한다.


인터페이스는 
1.추상메소드들을 추상화한 인터페이스 (역할)
2.인터페이스를 추상화한 인터페이스 (기능)

두가지가 존재한다.

(옆집 철수,민수,현수,콩순이가 강아지 집사 역할을 맡을 수 있다)
1.이때, 강아지 관리 책임(추상메소드들)을 추상화하여 강아지 관리 역할을 만드는것이 인터페이스이다.
2.강아지 관리, 고양이 관리, 햄스터 관리, 등 다양한 인터페이스들을 또 추상화해서 "관리"로 더 큰 인터페이스를 만들 수 있다 

상태 - 필드
행동(작은책임) - 메소드
책임(큰책임) - 추상 메소드
책임의 추상화 - 인터페이스


추상 메소드(책임)들이 공통적으로 의미하는것 -> 인터페이스(역할)
인터페이스(역할)의 추상화 -> (기능) !

*****SRP에서 단일책임이란, 기능이 하나여야 한다는것 아닐까?*****

SRP에서 말하는 단 하나의 책임은,

만약 인터페이스를 구현하는 클래스라면, 해당 클래스는 인터페이스가 의미하는 책임만을 지겠다는 의미고,
인터페이스를 구현하지 않는 클래스라면 해당 클래스에 모든 메소드들은 하나의 목적(역할)(인터페이스)로 묶일수 있다. 




/*그래서 한클래스에 큰 인터페이스만 상속받아야되고,

큰인터페이스는 작은인터페이스 여러개로 쪼개질순있다 이거지

이상적으로는 작은 인터페이스만으로 책임을 구현하는게 이상적이지만,

쓸데없이 너무 복잡해져서 적당한 크기의 인터페이스로 추상화(역할)함으로써 문제상황을 해결하는거구나! */


