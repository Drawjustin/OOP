추상 클래스와 인터페이스 차이

순수 추상클래스 = 인터페이스

인터페이스의 탄생배경이 굉장히 중요함

다중상속이 안되기때문에, 특정한 기능끼리 묶여있는 새로운 그룹을 만들고 싶어도 만들 수 없었음
-> 인터페이스 탄생



추상 클래스


하위 클래스와 상위 클래스는 is-a관계가성립해야됨

예를들어 고래는 포유류이다.
	상어는 어류이다.

이런식으로 점점 깊이가 깊어질수록 구체화되는것을 알 수있고,

속성이 동일함 !!



인터페이스의 경우 can do, has-a 관계가 성립함.

예를들어 비행기는 난다.
	새는 난다.
이런식으로 공통된 행위의 속성을 추상화한게 인터페이스임.

속성이 같으면 추상클래스, 기능이 같으면 인터페이스

속성이 같으면 → 추상 클래스
객체 간의 공통 속성이나 상태를 표현하고, 이를 계층적으로 설계하고 싶을 때 적합합니다.

기능이 같으면 → 인터페이스
객체 간에 공통된 행동(기능)을 정의하고, 다중 구현이나 유연한 설계가 필요할 때 적합합니다.
하위클래스가 상위클래스의 속성을 포함하는 계층구조를 표현하고 싶을 때 -> 추상클래스 ★
클래스 계층의 상속 관계를 넘어서 공통 기능을 다양한 클래스에 독립적으로 제공 -> 인터페이스★




package was.httpserver;

import java.io.IOException;

public interface HttpServlet {
    void service(HttpRequest request, HttpResponse response) throws IOException;

}


그렇다면 위의 서블릿은 왜 인터페이스로 작성되었는가?

가장큰 이유 : 확장성과 유연성때문에 (다중상속이 가능하기 때문에)
그다음 이유 : abstract로 구현할 이유가 없다.

-> 왜? 서블릿은 공통로직을 가질 가능성이 굉장히 낮음. (특별한 서블릿 굉장히 많이 존재)
그렇다면 abstract로 만들어서 얻을 이점이 없음.
-> 속성,행위를 계층구조로 상속시킴으로서 코드의 재사용성과 유지보수성을 높이는건데,
is-a관계로 만들 수 있는 서블릿이 굉장히 소수임


추상 클래스에 대해 이야기할 때 우리는 객체 유형의 특성을 정의하고 있습니다. 즉, 객체가 무엇인지 지정하는 것입니다 .

인터페이스에 대해 이야기하고 제공하겠다고 약속한 기능을 정의할 때, 우리는 객체가 할 수 있는 일에 대한 계약을 수립하는 것에 대해 이야기하고 있습니다.



언제 무엇을 해야 할지는 개념만 명확히 알고 있다면 매우 간단한 일입니다.

추상 클래스는 파생될 수 있는 반면 인터페이스는 구현될 수 있습니다. 둘 사이에는 약간의 차이가 있습니다. 추상 클래스를 파생할 때 파생 클래스와 기본 클래스 간의 관계는 'is a' 관계입니다. 예를 들어, 개는 동물이고 양은 동물입니다. 즉, 파생 클래스는 기본 클래스에서 일부 속성을 상속합니다.

반면 인터페이스 구현의 경우 관계는 "될 수 있다"입니다. 예를 들어, 개는 스파이 개가 될 수 있습니다. 개는 서커스 개가 될 수 있습니다. 개는 경주 개가 될 수 있습니다. 즉, 무언가를 얻기 위해 특정 메서드를 구현한다는 의미입니다.