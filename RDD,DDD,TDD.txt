초기에 RDD는 다음과같이 역할에 따른 책임, 그에따른 기능을 설계하는 것이 좋더라는 설계 방법이다.
역할 -> 책임 -> 기능

DDD는 RDD를 막상 구현하려고 보니, 생각보다 힘들어서 쉬운 방법이 없을까 찾다가 도메인을 기반으로 설계하면 RDD를 쉽게 수행할 수 있다는 것을 발견한다.
역할 -> 책임 -> 기능
TDD는 DDD가 생각보다 설계에 많은 시간이 들며, 기술적 어려움을 마주쳤을 때 이를 중간에 엎고 다시 설계하기에 어려움이 있었다.
역할 -> 책임 -> 기능
이에 테스트를 통해 역할 -> 책임 -> 기능을 나눌때,  특정 기능은, 어떤 역할에, 책임에 부여해야할지 테스트를 통해 확고히하고
기술적 어려움을 보다 빠르게 봉착하여 해결할 수 있는 장점이 있었다.
다만 굉장히 어렵다고 한다.

즉 한마디로
RDD는 초기에 역할을 정의하고 책임을 나누며 협력을 설계하는 데 적합하다.
DDD는 도메인을 중심으로 역할과 책임을 도출하고, 비즈니스 로직을 기반으로 기능을 구현하는 데 적합합니다.
TDD는 테스트를 통해 역할과 책임을 도출하며, 작은 단위로 기능을 구현하고 리팩토링을 통해 설계를 개선하는 데 적합합니다.


RDD는 방법론.
DDD는 RDD를 구현하기 위한 방법중 하나, (도메인 위주)
TDD는 RDD를 구현하기 위한 방법중 하나, (테스트 위주)

즉 한마디로
RDD는 설계의 근본 철학이며, 객체가 맡는 역할을 중심으로 책임과 기능을 나누는 설계 방법론이다.
DDD는 RDD를 도메인 모델을 참고하여 구현하며, 복잡한 도메인 요구사항을 다룰 때 적합하다.
TDD는 RDD를 테스트 중심으로 구현하며, 코드의 품질과 테스트 가능성을 확보하면서 설계를 발전시키는 데 적합하다.
따라서, RDD는 중심 철학이고, DDD와 TDD는 RDD를 구현하는 구체적인 방식으로 이해하면 된다.




핵심: DDD는 기술적 요구사항에 고려가 힘들더라.
그래서 TDD가 등장!