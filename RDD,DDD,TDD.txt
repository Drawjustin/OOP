초기에 RDD는 다음과같이 정의내리고 하면 좋다~이런거고
역할 -> 책임 -> 기능

DDD는 다음과 같이 사용할때, 도메인을 기반으로 하면 좋다~ 이런거고
역할 -> 책임 -> 기능
TDD는 다음과 같이 사용할때 단위 테스트를 통해 명확히 나누면 좋다 이런거야?
역할 -> 책임 -> 기능


RDD는 초기에 역할을 정의하고 책임을 나누며 협력을 설계하는 데 적합합니다.
DDD는 도메인을 중심으로 역할과 책임을 도출하고, 비즈니스 로직을 기반으로 기능을 구현하는 데 적합합니다.
TDD는 테스트를 통해 역할과 책임을 도출하며, 작은 단위로 기능을 구현하고 리팩토링을 통해 설계를 개선하는 데 적합합니다.


RDD는 약간 방법론? 이런거고,
DDD는 도메인을 참고해서 RDD를 구현하자!
TDD는 테스트를 통해서 RDD를 구현하자! 이런거지?


RDD는 설계의 근본 철학이며, 객체가 맡는 역할을 중심으로 책임과 기능을 나누는 설계 방법론입니다.
DDD는 RDD를 도메인 모델을 참고하여 구현하며, 복잡한 도메인 요구사항을 다룰 때 적합합니다.
TDD는 RDD를 테스트 중심으로 구현하며, 코드의 품질과 테스트 가능성을 확보하면서 설계를 발전시키는 데 적합합니다.
따라서, RDD는 중심 철학이고, DDD와 TDD는 RDD를 구현하는 구체적인 방식으로 이해하면 좋습니다! 😊





DDD -> 초기 설계에 많은 시간과 노력이 들고, 복잡함

제일 중요함 :기술적 요구사항에 대한 고려가 힘듬

-> TDD 등장
TDD는 테스트를 중심으로 코드를 작성하므로 
기술적 요구사항을 충족시키며 빠른 피드백(보완)가능!

TDD도 단점이 있다
-> 테스트를 먼저하기 때문에 DDD보다 시간이 더 많이 소요될 수도 있다.
-> 어렵다
-> 좀많이어렵다
